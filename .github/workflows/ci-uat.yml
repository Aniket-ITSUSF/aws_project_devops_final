name: UAT Build & Push

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ main ]

jobs:
  test-all:
    name: Install & Test All Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install & Test
        run: |
          for svc in services/*; do
            (
              cd $svc
              npm install
              npm test
            )
          done

  build-and-push:
    name: Build & Push :uat Images
    needs: test-all
    runs-on: ubuntu-latest
    env:
      AWS_REGION:     ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS \
                --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build & Push uat
        run: |
          for svc in red-service blue-service green-service; do
            REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$svc
            docker build -t $REPO:uat services/$svc
            docker push $REPO:uat
          done
      
  deploy-uat:
    name: ðŸŸ¢ Deploy to dev
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # 1) Install kubectl & ArgoCD CLI
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name   ${{ secrets.EKS_CLUSTER_NAME }}

          kubectl config set-context dev --namespace=argocd

      - name: Install ArgoCD CLI
        run: |
          curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 \
            -o /usr/local/bin/argocd
          chmod +x /usr/local/bin/argocd

      - name: Login to ArgoCD (core mode)
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --insecure \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} 

      - name: Sync ArgoCD Apps
        run: |
          BRANCH=${{ github.head_ref }}
          for APP in green-service-dev blue-service-dev red-service-dev; do
          echo "Pointing $APP at branch $BRANCH"
          argocd app set $APP --revision $BRANCH
          argocd app sync $APP
          done
          
