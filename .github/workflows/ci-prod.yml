name: Prod Release & Push

on:
  push:
    branches: [ main ]
  # Optional: allow manual runs
  workflow_dispatch:

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic.outputs.nextRelease.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          extra_plugins: |
            ["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator","@semantic-release/github"]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    name: Build & Push :prod & :latest
    needs: release
    runs-on: ubuntu-latest
    env:
      AWS_REGION:     ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      IMAGE_TAG:      ${{ needs.release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login \
                --username AWS \
                --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build & Push Images
        run: |
          for svc in red-service blue-service green-service; do
            REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$svc
            # build and push prod tag
            docker build -t $REPO:$IMAGE_TAG services/$svc
            docker push $REPO:$IMAGE_TAG
            # tag and push latest
            docker tag $REPO:$IMAGE_TAG $REPO:latest
            docker push $REPO:latest
          done
