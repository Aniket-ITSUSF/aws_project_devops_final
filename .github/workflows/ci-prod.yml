name: Prod Release & Blue/Green Deployment

# 1. Trigger on pushes to main or manual dispatch
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write       # for semantic-release to push tags & changelog
  id-token: write       # if you ever integrate OIDC
  actions: read

jobs:
  # ─────────────── 1) Semantic Release ───────────────
  release:
    name: 🚀 Semantic Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout repo (full history & tags)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run semantic-release
        id: semantic
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get released version
        id: get-version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # ─────────────── 2) Build & Push Docker ───────────────
  build-and-push:
    name: 🔧 Build & Push Docker Images
    needs: release
    runs-on: ubuntu-latest
    env:
      AWS_REGION:     ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      IMAGE_TAG:      ${{ needs.release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region:            ${{ secrets.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password \
            | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build & Push Tags
        run: |
          for svc in red-service green-service blue-service; do
            REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$svc
            # push semver tag
            docker build -t $REPO:$IMAGE_TAG services/$svc
            docker push $REPO:$IMAGE_TAG
            # push "prod" alias
            docker tag  $REPO:$IMAGE_TAG $REPO:prod
            docker push $REPO:prod
            # push "latest"
            docker tag  $REPO:$IMAGE_TAG $REPO:latest
            docker push $REPO:latest
          done


  # ─────────────── 3) Deploy to Preprod (green) ───────────────
  deploy-preprod:
    name: 🟢 Deploy to Preprod (green)
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: preprod

    steps:
      # 1) Install kubectl & ArgoCD CLI
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      - name: Install ArgoCD CLI
        run: |
          curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 \
            -o /usr/local/bin/argocd
          chmod +x /usr/local/bin/argocd

      # 2) Configure AWS & kubeconfig for EKS
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region:            ${{ secrets.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name   ${{ secrets.EKS_CLUSTER_NAME }}

          kubectl config set-context prod --namespace=argocd

      # 3) Log in via 'core' (uses kubectl under the hood)
      - name: Login to ArgoCD (core mode)
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --core \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            # --grpc-web can be added if you need it :contentReference[oaicite:4]{index=4}

      # 4) Sync your preprod (green) apps
      - name: Sync ArgoCD Apps (prod-green)
        run: |
          argocd app sync blue-service-prod-green
          argocd app sync green-service-prod-green
          argocd app sync red-service-prod-green


  # ─────────────── 4) Smoke-test Preprod ───────────────
  smoke-test:
    name: 🔍 Smoke-test Preprod
    needs: deploy-preprod
    runs-on: ubuntu-latest
    steps:
      - name: Test health endpoint
        run: |
          curl -f https://preprod.dev-ops-project.com/blue/health
          curl -f https://preprod.dev-ops-project.com/green/health
          curl -f https://preprod.dev-ops-project.com/red/health

  # ─────────────── 5) Promote to Prod (blue) ───────────────
  promote-prod:
    name: 🔄 Flip In-Cluster Blue/Green
    needs: smoke-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region:            ${{ secrets.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name   ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Flip Ingress default backend
        shell: bash
        env:
          NAMESPACE: prod-blue
          INGRESS: env-ingress
        run: |
          CURRENT=$(kubectl -n $NAMESPACE get ingress $INGRESS \
            -o jsonpath='{.spec.rules[0].http.paths[0].backend.service.name}')
          if [[ "$CURRENT" == "blue-service" ]]; then
            NEXT="green-service"
          else
            NEXT="blue-service"
          fi
          echo "Switching Ingress $INGRESS in $NAMESPACE → $NEXT"
          kubectl patch ingress $INGRESS -n $NAMESPACE \
            --type=json \
            -p '[{
              "op":"replace",
              "path":"/spec/rules/0/http/paths/0/backend/service/name",
              "value":"'"$NEXT"'"
            }]'
