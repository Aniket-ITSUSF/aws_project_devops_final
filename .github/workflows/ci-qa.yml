name: QA Build, Test & Push

on:
  push:
    branches:
      - 'develop/**'
      - 'feature/**'
      # Add any other feature branch patterns you might use

  workflow_dispatch:
    inputs:
      service:
        description: 'Optional: name of service to build/test (e.g. red-service)'
        required: false
jobs:
  test:
    name: Test Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changed.outputs.services }}
      all_services: ${{ steps.changed.outputs.all_services }}
      run_all: ${{ steps.changed.outputs.run_all }}
    steps:
      - name: Checkout code (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine changed services and files
        id: changed
        run: |
          # Handle case where this is the first commit on the branch
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # For new branches, get changes compared to main branch
            git fetch origin main
            CHANGES=$(git diff --name-only origin/main ${{ github.sha }})
          else
            # Normal case - get changes since last commit
            CHANGES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi
          
          # Find services with changes
          SERVICES=$(echo "$CHANGES" | grep '^services/' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          
          # Find all service directories
          ALL_SERVICES=$(find services -maxdepth 1 -mindepth 1 -type d | cut -d'/' -f2 | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "all_services=$ALL_SERVICES" >> $GITHUB_OUTPUT
          
          # Check if there are changes outside of services directory
          NON_SERVICE_CHANGES=$(echo "$CHANGES" | grep -v '^services/' | wc -l)
          if [ $NON_SERVICE_CHANGES -gt 0 ]; then
            echo "run_all=true" >> $GITHUB_OUTPUT
          else
            echo "run_all=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Test Changed Services
        if: steps.changed.outputs.run_all == 'false'
        run: |
          # Parse services JSON to array
          SERVICES_JSON='${{ steps.changed.outputs.services }}'
          readarray -t SERVICES_ARRAY < <(echo "$SERVICES_JSON" | jq -r '.[]')
          
          for SERVICE in "${SERVICES_ARRAY[@]}"; do
            echo "Testing service: $SERVICE"
            cd services/$SERVICE
            npm install
            npm test
            # Return to project root for next iteration
            cd ../../
          done

      - name: Test All Services
        if: steps.changed.outputs.run_all == 'true'
        run: |
          # Parse all services JSON to array
          ALL_SERVICES_JSON='${{ steps.changed.outputs.all_services }}'
          readarray -t ALL_SERVICES_ARRAY < <(echo "$ALL_SERVICES_JSON" | jq -r '.[]')
          
          for SERVICE in "${ALL_SERVICES_ARRAY[@]}"; do
            echo "Testing service: $SERVICE"
            cd services/$SERVICE
            npm install
            npm test
            # Return to project root for next iteration
            cd ../../
          done

  build-and-push:
    name: Build & Push :develop Images
    needs: test
    if: needs.test.outputs.services != '[]' || needs.test.outputs.run_all == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS \
                --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build & Push Changed Services
        if: needs.test.outputs.run_all == 'false'
        run: |
          # Parse services JSON to array
          SERVICES_JSON='${{ needs.test.outputs.services }}'
          readarray -t SERVICES_ARRAY < <(echo "$SERVICES_JSON" | jq -r '.[]')
          
          for SERVICE in "${SERVICES_ARRAY[@]}"; do
            echo "Building and pushing service: $SERVICE"
            REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE
            docker build -t $REPO:develop services/$SERVICE
            docker push $REPO:develop
          done

      - name: Build & Push All Services
        if: needs.test.outputs.run_all == 'true'
        run: |
          # Parse all services JSON to array
          ALL_SERVICES_JSON='${{ needs.test.outputs.all_services }}'
          readarray -t ALL_SERVICES_ARRAY < <(echo "$ALL_SERVICES_JSON" | jq -r '.[]')
          
          for SERVICE in "${ALL_SERVICES_ARRAY[@]}"; do
            echo "Building and pushing service: $SERVICE"
            REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE
            docker build -t $REPO:develop services/$SERVICE
            docker push $REPO:develop
          done
  deploy-dev:
    name: ðŸŸ¢ Deploy to dev
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/feature/')
    needs: build-and-push

    steps:
      # 1) Install kubectl & ArgoCD CLI
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name   ${{ secrets.EKS_CLUSTER_NAME }}

          kubectl config set-context dev --namespace=argocd

      - name: Install ArgoCD CLI
        run: |
          curl -sSL https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 \
            -o /usr/local/bin/argocd
          chmod +x /usr/local/bin/argocd

      - name: Login to ArgoCD (core mode)
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --insecure \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} 

      - name: Sync ArgoCD Apps
        run: |
          argocd repo update https://github.com/Aniket-ITSUSF/final_devops_infra.git --refresh
          
          BRANCH=${GITHUB_REF#refs/heads/}
          for APP in green-service-dev blue-service-dev red-service-dev; do
          echo "Pointing $APP at branch $BRANCH"
          argocd app set $APP --revision $BRANCH
          argocd app sync $APP
          done
